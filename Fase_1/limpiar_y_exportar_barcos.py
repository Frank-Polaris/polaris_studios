# ================================================================
# üö¢ PROYECTO: Limpieza y exportaci√≥n de datos de buques
# Autor: Frank Hern√°ndez
# Fase 1 ‚Äì Bloque R7
# Descripci√≥n:
#   Lee un archivo de texto con datos de barcos,
#   limpia los registros incompletos o duplicados,
#   ordena por a√±o y exporta un archivo CSV limpio y ordenado.
# ================================================================

import csv  # M√≥dulo est√°ndar para manejar archivos CSV en Python

# Lista donde se guardar√°n los registros v√°lidos
barcos_limpios = []

# Separador visual en consola
print("\n" + "*" * 80 + "\n")

# ------------------------------------------------
# 1Ô∏è‚É£ LECTURA DEL ARCHIVO ORIGINAL
# ------------------------------------------------
# Abrimos el archivo .txt (simula un CSV con posibles errores)
# encoding="utf-8" garantiza compatibilidad con caracteres latinos.
with open("barcos_sucios.txt", "r", encoding="utf-8") as archivo:
    lector = csv.reader(archivo)      # Crea el lector CSV (separa por comas)
    heading = next(lector)            # Salta la primera l√≠nea (encabezados)

    # Recorremos cada l√≠nea del archivo
    for line in lector:
        if len(line) != 4:
            continue  # Si no hay 4 columnas, se descarta la fila

        # Eliminamos espacios extra y capitalizamos cada campo
        nombre, pais, a√±o, tonelaje = [v.strip().capitalize() for v in line]

        # Validamos que no haya campos vac√≠os
        if not nombre or not pais or not a√±o or not tonelaje:
            continue

        # Intentamos convertir a√±o y tonelaje a n√∫mero entero
        try:
            a√±o = int(a√±o)
            tonelaje = int(tonelaje)
        except ValueError:
            continue  # Si no se puede convertir, descartamos la fila

        # Evitamos duplicados (por nombre + a√±o)
        if not any(b["nombre"] == nombre and b["a√±o"] == a√±o for b in barcos_limpios):
            barcos_limpios.append({
                "nombre": nombre,
                "pais": pais,
                "a√±o": a√±o,
                "tonelaje": tonelaje
            })

# ------------------------------------------------
# 2Ô∏è‚É£ ORDENAMIENTO DE LOS REGISTROS
# ------------------------------------------------
# Ordenamos por a√±o (ascendente). Si prefieres del m√°s nuevo al m√°s antiguo:
# barcos_limpios.sort(key=lambda b: b["a√±o"], reverse=True)
barcos_limpios.sort(key=lambda b: b["a√±o"])

# ------------------------------------------------
# 3Ô∏è‚É£ IMPRESI√ìN EN CONSOLA
# ------------------------------------------------
# Mostramos los resultados limpios y ordenados
for b in barcos_limpios:
    print(f"Buque: {b['nombre']}, Bandera: {b['pais']}, A√±o: {b['a√±o']} -- {b['tonelaje']} UAB")

# Mostramos un resumen final
print("\nTotal de barcos limpios:", len(barcos_limpios))
print("\n" + "*" * 80 + "\n")

# ------------------------------------------------
# 4Ô∏è‚É£ EXPORTACI√ìN A CSV FINAL
# ------------------------------------------------
# Creamos un nuevo archivo limpio y ordenado para futuras fases (SQLite, BI, etc.)
with open("barcos_ordenados.csv", "w", encoding="utf-8", newline="") as salida:
    escritor = csv.writer(salida)  # Inicializamos el escritor CSV

    # Escribimos la fila de encabezados (nombres de columnas)
    escritor.writerow(["nombre", "pais", "a√±o", "tonelaje"])

    # Escribimos cada barco como una fila del CSV
    for b in barcos_limpios:
        escritor.writerow([b["nombre"], b["pais"], b["a√±o"], b["tonelaje"]])

# Mensaje final de confirmaci√≥n
print("‚úÖ Archivo 'barcos_ordenados.csv' generado correctamente.")
print("\n" + "*" * 80 + "\n")

